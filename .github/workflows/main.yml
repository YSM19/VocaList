name: Java CI/CD with Gradle and Docker

# event trigger
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      ## jdk setting
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      ## application.yml 파일을 생성합니다.
      - name: make application.yml
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION }}" > ./application.yml
        shell: bash

      ## gradlew 실행 권한 부여
      - name: Grant execute permisson for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle (without Test)
        run: ./gradlew clean build --stacktrace  #-x test

      ########## CD(Continuous Delivery) ##########
      ## docker hub에 로그인하고 vocalist에 이미지를 빌드 & push 합니다.
      - name: Docker build & push to repo
        if: contains(github.ref, 'main')
        run: |
          docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
          docker build -f Dockerfile -t "${{ secrets.DOCKER_USERNAME }}"/vocalist .
          docker push "${{ secrets.DOCKER_USERNAME }}"/vocalist

      ## AWS EC2에 접속하고 main을 배포합니다.
      - name: Deploy
        uses: appleboy/ssh-action@master
        id: deploy
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ubuntu # 인스턴스를 시작하는 데 사용되는 AMI에 정의된 사용자 이름을 입력합니다. 사용자 지정 사용자 이름을 정의하지 않은 경우 기본 사용자 이름인 ubuntu을(를) 사용합니다.
          key: ${{ secrets.PRIVATE_KEY }} # 키 페어의 pem 키
          #            sudo docker run -d --log-driver=syslog -p 8081:8081 -e SPRING_PROFILES_ACTIVE=dev "${{ secrets.DOCKER_USERNAME }}"/runninghi-dev
          port: 22
          script: |
            sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            sudo docker stop backend
            ## 종료된 이미지 삭제
            #sudo docker rm -f $(sudo docker ps --filter 'status=exited' -a -q)
            ## 사용하지 않는 이미지 삭제
            #sudo docker image prune -a -f
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}"/vocalist
            # sudo docker run -d --rm --name backend -p 8080:8080 "${{ secrets.DOCKER_USERNAME }}"/vocalist
            sudo docker run -d --rm --name backend -p 443:443 "${{ secrets.DOCKER_USERNAME }}"/vocalist

